signature Extension where

---------------------------------------------------------------------------------
-- UTxO transitions
---------------------------------------------------------------------------------
-- | Core state which can be extended.
data State

instance Eq State

-- | Signal which may extend a leger.
data Signal

-- | Base states, which may be considered valid without any transitions.
baseStates :: [State]

-- | All states must be reachable from a finite set of _base states_ through a
-- chain of valid transitions. In order to allow us to validate from the "top
-- down", we additionally require that we be able to deconstruct the state layer
-- by layer.
--
-- TODO This is basically requiring that `State` be `Foldable` if we made it
-- polymorphic. Would this be easier to understand?
peelState :: State -> (State, Signal)

-- | Type encapsulating the set of possible failures at the predicate level when
-- extending a ledger.
data PredicateFailure

instance Eq PredicateFailure
instance Show PredicateFailure
